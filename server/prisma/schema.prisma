// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------ Createing user model ---------------
model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  role               UserRole
  needPasswordChange Boolean   @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

//---------------- Admin Table----------------
model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

//----------------- Doctor Table---------------
model Doctor {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int                 @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted          Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  user                User                @relation(fields: [email], references: [email])
  doctorSpecialties   DoctorSpecialties[]

  @@map("doctors")
}

//-------------Patient Table ------------------
model Patient {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  profilePhoto      String?
  contactNumber     String
  address           String?
  isDeleted        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  user              User               @relation(fields: [email], references: [email])
  PatientHealthData PatientHealthData?
  medicalReport     MedicalReport[]

  @@map("patients")
}

//-------------Specialties Table ------------------
model Specialties {
  id                String              @id @default(uuid())
  title             String
  icon              String
  doctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

//-------------DoctorSpecialties Table ------------------
model DoctorSpecialties {
  specialitiesId String
  specialites    Specialties @relation(fields: [specialitiesId], references: [id])
  doctorId       String
  doctor         Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
  @@map("doctor_specialites")
}

//-------------Patient Health Data Table ------------------
model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean
  hasDiabetes         Boolean
  height              String
  weight              String
  smokingStatus       Boolean
  dietaryPreferences  String
  pregnancyStatus     Boolean
  mentalHealthHistory String
  immunizationStatus  String
  hasPastSurgeries    Boolean
  recentAnxiety       Boolean
  recentDepression    Boolean
  maritalStatus       MaritalStatus
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())

  @@map("patient_health_datas")
}

//-------------Medical Report Table ------------------
model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("medical_reports")
}

//--------Gender--------
enum Gender {
  MALE
  FEMALE
}

//-----User role------- 
enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

//-------Userstatus ---------
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}
