// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------ Createing user model ---------------
model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  role               UserRole
  needPasswordChange Boolean   @default(true)
  status             UserStaus @default(ACTIVE)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

//---------------- Admin Table----------------
model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleteAt    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

//----------------- Doctor Table---------------
model Doctor {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int                 @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleteAt          Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  user                User                @relation(fields: [email], references: [email])
  doctorSpecialties   DoctorSpecialties[]

  @@map("doctors")
}

//-------------Patient Table ------------------
model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleteAt    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  user          User     @relation(fields: [email], references: [email])

  @@map("patients")
}

//-------------Specialties Table ------------------
model Specialties {
  id                String              @id @default(uuid())
  title             String
  icon              String
  doctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

//-------------DoctorSpecialties Table ------------------
model DoctorSpecialties {
  specialitiesId String
  specialites    Specialties @relation(fields: [specialitiesId], references: [id])
  doctorId       String
  doctor         Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
  @@map("doctor_specialites")
}

//--------Gender--------
enum Gender {
  MALE
  FEMALE
}

//-----User role------- 
enum UserRole {
  SUPPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

//-------Userstatus ---------
enum UserStaus {
  ACTIVE
  BLOCKED
  DELETED
}
